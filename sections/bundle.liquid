<div class="main-container">
    <h1>Build Your Bundle</h1>

    <div class="section-wrapper">

        <div class="product-grid">
            {% for product in collections['Gold'].products %}
                {% for variant in product.variants %}
                    <div class="product-item" 
                         data-id="{{ variant.id }}" 
                         data-price="{{ variant.price | money_without_currency }}">
                        <img src="{{ product.featured_image | img_url: 'medium' }}" alt="{{ product.title }}">
                        <h3>{{ product.title }}</h3>
                        <div class="quantity-controls">
                            <button class="decrement">-</button>
                            <span class="quantity-check">1</span>
                            <button class="increment">+</button>
                        </div>
                        <button class="select-product-button">Add to box</button>
                    </div>
                {% endfor %}
            {% endfor %}
        </div>

        <div class="side-box">

            <div class="product-count-container">
                <h3>Selected Products (<span id="total-products">0</span>)</h3>
                <div class="product-selection-box">
                    <!-- Selected products will appear here -->
                </div>
            </div>

            
            <div class="subtotal-container">
                <p>Subtotal: <span id="subtotal-price">$0.00</span></p>
                <button id="proceed-to-cart" class="proceed-to-cart-button">Proceed to Cart</button>
            </div>

        </div>
    </div>

    <!-- Notification -->
    <div id="notification" class="notification hidden">
        <p>Products added to the cart!</p>
    </div>
</div>

<style>
   /* Main container styling */
.main-container {
    padding: 20px;
    margin: 0 auto;
}

/* Section Wrapper */
.section-wrapper {
    display: flex;
    justify-content: space-between;
    flex-wrap: wrap;
    gap: 20px;
}

/* Product Grid */
.product-grid {
    display: grid;
    grid-template-columns: repeat(2, 1fr);
    gap: 20px;
    width: 65%;
}

.product-item {
    border: 2px solid #ddd;
    padding: 15px;
    text-align: center;
    background-color: #f9f9f9;
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
    transition: transform 0.3s;
}

.product-item:hover {
    transform: translateY(-5px);
}

.product-item img {
    max-width: 100%;
    height: auto;
    margin-bottom: 10px;
}

.quantity-controls {
    display: flex;
    align-items: center;
    justify-content: center;
    margin-top: 10px;
}

.quantity-controls button {
    background: none;
    color: #000;
    border: none;
    padding: 5px 15px;
    cursor: pointer;
    font-size: 20px;
    font-weight: bold;
    border-radius: 5px;
}

.quantity-controls .quantity-check {
    margin: 0 15px;
    font-size: 18px;
    font-weight: bold;
}

.select-product-button {
    background-color: #000;
    color: white;
    padding: 8px 20px;
    border: none;
    border-radius: 5px;
    cursor: pointer;
    margin-top: 10px;
    font-size: 16px;
}

.select-product-button:hover {
    background-color: #424141;
}

/* Side Box */
.side-box {
    width: 30%;
    padding: 20px;
    background-color: #f4f4f4;
    border: 2px solid #ccc;
    border-radius: 10px;
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
    position: sticky;
    top: 40px;
    height: fit-content;
}

.product-count-container h3 {
    color: #000;
    font-size: 20px;
    text-align: center;
    margin-bottom: 15px;
}

.product-selection-box {
    height: 600px;
    overflow-y: auto;
    background-color: #fff;
    padding: 15px;
    border: 2px solid #ddd;
    border-radius: 5px;
    margin-bottom: 20px;
}

.selected-product-item {
    position: relative;
    margin-bottom: 15px;
    border-bottom: 1px solid #ccc;
}

.selected-product-item img {
    max-width: 60px;
    margin-right: 10px;
}

.selected-product-item h4 {
    font-size: 14px;
    margin: 0;
    display: inline;
    position: absolute;
    top: 5px;
}

.selected-product-item .quantity-controls {
    margin-top: 5px;
    display: inline;
    margin: 0;
    position: relative;
    top: -40px;
    left: 90px;
    border: 1px solid #d9d9d9;
    padding: 6px 10px;
}

.selected-product-item .selected-price {
    font-size: 16px;
    font-weight: bold;
    text-align: right;
    margin-top: -10px;
    margin-bottom: 10px;
    position: absolute;
    top: 10px;
    right: 0;
}

.selected-product-item .remove-product {
    font-size: 14px;
    text-decoration: underline;
    background: none;
    border: none;
    cursor: pointer;
    display: block;
    position: absolute;
    top: 55px;
    right: 0;
}

/* Subtotal Container */
.subtotal-container {
    text-align: center;
    margin-top: 20px;
}

.subtotal-container p {
    font-size: 18px;
    font-weight: bold;
    margin-bottom: 10px;
}

.proceed-to-cart-button {
    background-color: #598959;
    color: white;
    padding: 10px 20px;
    border: none;
    border-radius: 5px;
    cursor: pointer;
    font-size: 16px;
}

.proceed-to-cart-button:hover {
    background-color: #79b379;
}

/* Notification */
.notification {
    position: fixed;
    bottom: 20px;
    right: 20px;
    background-color: #4CAF50;
    color: white;
    padding: 15px;
    border-radius: 5px;
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.2);
    font-size: 16px;
    display: none;
}

.notification.show {
    display: block;
}

.notification.hidden {
    display: none;
}

/* Responsive Design */
@media (max-width: 870px) {
    .section-wrapper {
        flex-direction: column;
        width: 90%;
    }

    .product-grid {
        width: 100%;
        grid-template-columns: repeat(2, 1fr);
        margin-bottom: 20px;
    }

    .side-box {
        width: 100%;
        margin-top: 20px;
        padding: 15px;
    }

    .product-selection-box {
        height: 400px;
    }

    .selected-product-item img {
        max-width: 50px;
    }

    .selected-product-item .quantity-controls {
        top: -35px;
        left: 80px;
    }

    .selected-product-item .selected-price {
        font-size: 14px;
    }

    .subtotal-container p {
        font-size: 16px;
    }

    .proceed-to-cart-button {
        padding: 8px 15px;
        font-size: 14px;
    }
}

{% comment %} @media (min-width: 769px) and (max-width: 1024px) {
    .product-grid {
        grid-template-columns: repeat(3, 1fr);
    }
} {% endcomment %}

@media (max-width: 1890px) {
    .product-grid {
        grid-template-columns: repeat(4, 1fr);
    }

}

@media (max-width: 1665px) {
    .section-wrapper {
        display: flex;
        justify-content: center;
    }

    .selected-product-item h4 {
        font-size: 12px;
        white-space: normal;
        word-wrap: break-word;
    }

}

@media (max-width: 1472px) {
    .product-grid {
        grid-template-columns: repeat(3, 1fr);
        width: 60%;
    }

    .side-box {
        width: 35%;
    }

}

@media (max-width: 1472px) {
    .product-grid {
        grid-template-columns: repeat(2, 1fr);
        width: 50%;
    }

    .side-box {
        width: 45%;
    }


}

@media (max-width: 1030px) {
    .product-grid {
        grid-template-columns: repeat(1, 1fr);
        width: 40%;
    }

    .side-box {
        width: 55%;
    }

}

</style>



<script>
  
    document.addEventListener('DOMContentLoaded', function () {
        const productItems = document.querySelectorAll('.product-item');
        const selectionBox = document.querySelector('.product-selection-box');
        const totalProductsElement = document.getElementById('total-products');
        const subtotalPriceElement = document.getElementById('subtotal-price');
        const proceedToCartButton = document.getElementById('proceed-to-cart');
        const notification = document.createElement('div'); 
        notification.id = 'notification';
        notification.style.display = 'none'; 
        notification.style.position = 'fixed';
        notification.style.bottom = '130px';
        notification.style.right = '60px';
        notification.style.backgroundColor = '#d4edda'; 
        notification.style.color = '#155724'; 
        notification.style.padding = '5px';
        notification.style.fontSize = '12px';
        notification.style.borderRadius = '5px';
        notification.style.boxShadow = '0 0 10px rgba(0, 0, 0, 0.1)';
        document.body.appendChild(notification);
        
        let totalProducts = 0;
        let subtotal = 0;
    
        const productQuantities = {};
    
        productItems.forEach(item => {
            const productId = item.dataset.id;
            const productPrice = parseFloat(item.dataset.price);
            const selectButton = item.querySelector('.select-product-button');
            const incrementButton = item.querySelector('.increment');
            const decrementButton = item.querySelector('.decrement');
            const quantityDisplay = item.querySelector('.quantity-check');
    
            productQuantities[productId] = 1;
    
            incrementButton.addEventListener('click', function () {
                productQuantities[productId]++;
                updateProductQuantity(productId, productQuantities[productId], productPrice);
            });
    
            decrementButton.addEventListener('click', function () {
                if (productQuantities[productId] > 1) {
                    productQuantities[productId]--;
                    updateProductQuantity(productId, productQuantities[productId], productPrice);
                }
            });
    
            selectButton.addEventListener('click', function () {
                addProductToSelection(item, productQuantities[productId], productPrice);
            });
        });
    
        function updateProductQuantity(productId, quantity, price) {
            const productItem = document.querySelector(`.product-item[data-id="${productId}"]`);
            const productInSideBox = selectionBox.querySelector(`[data-id="${productId}"]`);
    
            if (productItem) {
                productItem.querySelector('.quantity-check').innerText = quantity;
            }
    
            if (productInSideBox) {
                productInSideBox.querySelector('.selected-quantity').innerText = quantity;
                productInSideBox.querySelector('.selected-price').innerText = `$${(price * quantity).toFixed(2)}`;
            }
    
            updateSubtotal();
            setupSideBoxControls(productId);
        }
    
        function addProductToSelection(productItem, quantity, price) {
            const productId = productItem.dataset.id;
            const productImage = productItem.querySelector('img').src;
            const productTitle = productItem.querySelector('h3').innerText;
            const existingProduct = selectionBox.querySelector(`[data-id="${productId}"]`);
    
            if (existingProduct) {
                existingProduct.querySelector('.selected-quantity').innerText = quantity;
                existingProduct.querySelector('.selected-price').innerText = `$${(price * quantity).toFixed(2)}`;
            } else {
                const productHtml = `
                    <div class="selected-product-item" data-id="${productId}">
                        <img src="${productImage}" alt="${productTitle}">
                        <h4>${productTitle}</h4>
                        <p><span class="selected-price">$${(price * quantity).toFixed(2)}</span></p>
                        <div class="quantity-controls">
                            <button class="decrement">-</button>
                            <span class="selected-quantity">${quantity}</span>
                            <button class="increment">+</button>
                        </div>
                        <button class="remove-product">Remove</button>
                    </div>
                `;
                selectionBox.insertAdjacentHTML('beforeend', productHtml);
                setupSideBoxControls(productId);
    
                totalProducts++;
                updateTotalProductsDisplay();
            }
    
            updateSubtotal();
        }
    
        function setupSideBoxControls(productId) {
            const selectedProduct = selectionBox.querySelector(`[data-id="${productId}"]`);
            const incrementButton = selectedProduct.querySelector('.increment');
            const decrementButton = selectedProduct.querySelector('.decrement');
            const removeButton = selectedProduct.querySelector('.remove-product');
    
            incrementButton.replaceWith(incrementButton.cloneNode(true));
            decrementButton.replaceWith(decrementButton.cloneNode(true));
            removeButton.replaceWith(removeButton.cloneNode(true));
    
            const newIncrementButton = selectedProduct.querySelector('.increment');
            const newDecrementButton = selectedProduct.querySelector('.decrement');
            const newRemoveButton = selectedProduct.querySelector('.remove-product');
    
            const productPrice = parseFloat(document.querySelector(`.product-item[data-id="${productId}"]`).dataset.price);
    
            newIncrementButton.addEventListener('click', function () {
                productQuantities[productId]++;
                updateProductQuantity(productId, productQuantities[productId], productPrice);
            });
    
            newDecrementButton.addEventListener('click', function () {
                if (productQuantities[productId] > 1) {
                    productQuantities[productId]--;
                    updateProductQuantity(productId, productQuantities[productId], productPrice);
                }
            });
    
            newRemoveButton.addEventListener('click', function () {
                selectedProduct.remove();
                totalProducts--;
                updateTotalProductsDisplay();
    
                const productItem = document.querySelector(`.product-item[data-id="${productId}"]`);
                if (productItem) {
                    productQuantities[productId] = 1;
                    productItem.querySelector('.quantity-check').innerText = 1;
                }
    
                updateSubtotal();
            });
        }
    
        function updateTotalProductsDisplay() {
            totalProductsElement.innerText = totalProducts;
        }
    
        function updateSubtotal() {
            subtotal = 0;
            selectionBox.querySelectorAll('.selected-product-item').forEach(item => {
                const priceText = item.querySelector('.selected-price').innerText.replace('$', '');
                subtotal += parseFloat(priceText);
            });
            subtotalPriceElement.innerText = `$${subtotal.toFixed(2)}`;
        }
    
        function showNotification(message) {
            notification.innerText = message;
            notification.style.display = 'block';
            setTimeout(() => {
                notification.style.display = 'none';
            }, 2000);
        }
    
        proceedToCartButton.addEventListener('click', function () {
            const items = [];
            selectionBox.querySelectorAll('.selected-product-item').forEach(item => {
                const variantId = item.dataset.id;
                const quantity = parseInt(item.querySelector('.selected-quantity').innerText, 10);
                items.push({ id: variantId, quantity: quantity });
            });
    
            if (items.length > 0) {
                addItemsToCart(items);
            } else {
                showNotification('Please select a product.');
            }
        });


function addItemsToCart(items) {
    $.ajax({
        url: '/cart/add.js',
        method: 'POST',
        contentType: 'application/json',
        data: JSON.stringify({ items: items }),
        dataType: 'json',
        success: function(data) {
            console.log('Items added to cart:', data);

            // Update the cart drawer content
            updateCartDrawer();

            // Update the cart icon
            updateCartIcon();

            $('cart-drawer').removeClass('is-empty');
            $('.drawer__inner-empty').hide();
            $('cart-drawer').load(location.href + " #CartDrawer");
            $('#cart-icon-bubble').load(location.href + " #cart-icon-bubble");

            // Open the cart drawer using vanilla JavaScript
            const cartDrawer = document.querySelector('cart-drawer');
            if (cartDrawer) {
                cartDrawer.open();
                console.log('Cart drawer opened');
            } else {
                console.error('Cart drawer element not found');
            }

            // Show notification
            showNotification('Products added to the cart!');
        },
        error: function(error) {
            console.error('Error adding items to cart:', error);
            showNotification('There was an error adding items to the cart.');
        }
    });
}

function updateCartDrawer() {
    $.ajax({
        url: '/cart.js',
        method: 'GET',
        dataType: 'json',
        success: function(data) {
            // Find the cart drawer and update its content
            const cartDrawer = document.querySelector('cart-drawer');
            if (cartDrawer) {
                // Assuming you have a method to update the drawer's content
                cartDrawer.updateContent();
                console.log('Cart drawer content updated');
            } else {
                console.error('Cart drawer element not found');
            }
        },
        error: function(error) {
            console.error('Error updating cart drawer:', error);
        }
    });
}

function updateCartIcon() {
    $.ajax({
        url: '/cart.js',
        method: 'GET',
        dataType: 'json',
        success: function(data) {
            $('#cart-icon-bubble').text(data.item_count);
        },
        error: function(error) {
            console.error('Error updating cart icon:', error);
        }
    });
}



    });
    
</script>


{% schema %}
{
  "name": "my-bundle",
  "settings": [

  ],
  "presets": [
    {
      "name": "my-bundle"
    }
  ]
}
{% endschema %}